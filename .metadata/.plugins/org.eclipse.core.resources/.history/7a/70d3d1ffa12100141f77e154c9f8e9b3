package com.example.android_rspeak_v1.transactions;

import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Build;
import android.util.Log;

import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.example.android_rspeak_v1.RSpeakApplication;
import com.example.android_rspeak_v1.database.HTTPRequest;
import com.example.android_rspeak_v1.database.HTTPRequestsDataSource;

public class GetUpdatesTransaction 
{
	private Context context;
	private HTTPRequest request;
	
	public GetUpdatesTransaction( Context context )
	{
		this.context = context;
	}
	
	public void beginTransaction()
	{
		// get the device id
		SharedPreferences device_properties = context.getSharedPreferences( "DEVICE_PROPERTIES", 0 );
		String device_id = device_properties.getString( RSpeakApplication.PROPERTY_DEVICE_ID, null );
		
		// then create the JSON object for the http request
		HashMap<String, String> params = new HashMap<String, String>();
	    params.put( HTTPRequest.DATA_DEVICE_ID, device_id );
	    JSONObject request_data = new JSONObject(params);
		
		// then add the question request to the database
		HTTPRequestsDataSource requestSource = new HTTPRequestsDataSource( context );
		requestSource.open();
		this.request = requestSource.createRequest( HTTPRequest.Type.POST, HTTPRequest.BASE_URL + HTTPRequest.URL_RETRIEVE_UPDATES, request_data.toString() );
		requestSource.close();
		
		// then try to send the request to the server
		request.startRequest( successListener(), errorListener() );
	}
	
	// if the request is successful
	private Response.Listener<JSONObject> successListener()
	{
		return new Response.Listener<JSONObject>() 
		{
			@TargetApi(Build.VERSION_CODES.GINGERBREAD)
			@Override
			public void onResponse( JSONObject response )
			{
				// Remove the request from the database
				HTTPRequestsDataSource requestSource = new HTTPRequestsDataSource( context );
				requestSource.open();
				requestSource.deleteRequest( request.getID() );
				requestSource.close();
				
				// get the question and response updates
				JSONArray question_updates = null;
				JSONArray response_updates = null;
				try
				{
					question_updates = response.getJSONArray( HTTPRequest.DATA_QUESTION_UPDATES );
					response_updates = response.getJSONArray( HTTPRequest.DATA_RESPONSE_UPDATES );
				}
				catch ( JSONException e )
				{
					Log.e( "error", "Error: couldn't read credit points after sending device id to server: " + e.toString() );
					return;
				}
				
				if ( credit_points != -1 ) // -1 could indicate the server didn't find the device id
				{
					SharedPreferences device_properties = context.getSharedPreferences( "DEVICE_PROPERTIES", 0 );
					Editor editor = device_properties.edit().putInt( HTTPRequest.DATA_CREDIT_POINTS, credit_points );
					if ( Build.VERSION.SDK_INT < 9 )
					{
						editor.commit();
					} 
					else 
					{
						editor.apply();
					}
				}
			}
		};
	}

	// if the request is not successful
	private Response.ErrorListener errorListener()
	{
		return new Response.ErrorListener() 
		{
			@Override
			public void onErrorResponse( VolleyError error )
			{
				// Also remove the request from the database
				HTTPRequestsDataSource requestSource = new HTTPRequestsDataSource( context );
				requestSource.open();
				requestSource.deleteRequest( request.getID() );
				requestSource.close();
				
				Log.e( "error", "failed to retrieve the credit score from the server:\n" + error.toString() );
			}
		};
	}
}
