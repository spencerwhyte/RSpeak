package com.example.android_rspeak_v1.database;

import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;

public class QuestionsDataSource 
{
	// Database Fields
	private SQLiteDatabase database;
	private RSpeakSQLiteHelper dbHelper;
	private String[] allColumns = { 
			RSpeakSQLiteHelper.QUESTIONS_COLUMN_ID,
			RSpeakSQLiteHelper.QUESTIONS_COLUMN_CONTENT,
			RSpeakSQLiteHelper.QUESTIONS_COLUMN_TIME_POSTED };
	
	public QuestionsDataSource( Context context )
	{
		dbHelper = new RSpeakSQLiteHelper( context );
	}
	
	public void open() throws SQLException
	{
		database = dbHelper.getWritableDatabase();
	}
	
	public void close()
	{
		dbHelper.close();
	}
	
	public Question createQuestion( String question_content, 
			long time_posted )
	{
		ContentValues values = new ContentValues();
		
		values.put(RSpeakSQLiteHelper.QUESTIONS_COLUMN_CONTENT, question_content );
		values.put(RSpeakSQLiteHelper.QUESTIONS_COLUMN_TIME_POSTED, time_posted );
		
		long question_id = database.insert(RSpeakSQLiteHelper.TABLE_QUESTIONS, null, values);
		Cursor cursor = database.query(RSpeakSQLiteHelper.TABLE_QUESTIONS,
				allColumns, 
				RSpeakSQLiteHelper.QUESTIONS_COLUMN_ID + " = " + question_id,
				null,
				null,
				null,
				null);
		cursor.moveToFirst();
		Question newQuestion = cursorToQuestion( cursor );
		cursor.close();
		return newQuestion;
	}
	
	public void deleteQuestion(Question question)
	{
		long question_id = question.getQuestionID();
		
		database.delete(RSpeakSQLiteHelper.TABLE_QUESTIONS, 
				RSpeakSQLiteHelper.QUESTIONS_COLUMN_ID + " = " + question_id, 
				null);
	}
	
	private List<Question> queryAllQuestions(String conditions)
	{
		List<Question> questions = new ArrayList<Question>();
		
		Cursor cursor = database.query(RSpeakSQLiteHelper.TABLE_QUESTIONS,
				allColumns,
				conditions,
				null,
				null,
				null,
				null);
		
		cursor.moveToFirst();
		while (!cursor.isAfterLast()) 
		{
			Thread thread = cursorToThread(cursor);
			threads.add(thread);
			cursor.moveToNext();
		}
		
		cursor.close();
		return threads;
	}
	
	public List<Thread> getAllThreads()
	{
		return queryAllThreads( null );
	}
	
	public Thread getThreadById( String thread_id )
	{
		return queryAllThreads(
				RSpeakSQLiteHelper.THREADS_COLUMN_ID +
				" = '" +
				thread_id + 
				"'" ).get( 0 );
	}
	
	public List<Thread> getLocallyAskedThreads()
	{
		return queryAllThreads( RSpeakSQLiteHelper.THREADS_COLUMN_ON_ASKER_DEVICE + " = 1" );
	}
	
	public List<Thread> getForeignAskedThreads()
	{
		return queryAllThreads( RSpeakSQLiteHelper.THREADS_COLUMN_ON_ASKER_DEVICE + " = 0" );
	}
	
	private Thread cursorToThread(Cursor cursor)
	{
		Thread thread = new Thread();
		
		thread.setThreadID(
				cursor.getString(
						cursor.getColumnIndex(RSpeakSQLiteHelper.THREADS_COLUMN_ID)));
		thread.setOtherDeviceID(
				cursor.getString(
						cursor.getColumnIndex(RSpeakSQLiteHelper.THREADS_COLUMN_OTHER_DEVICE_ID)));
		thread.setIsStopped(
				cursor.getInt(
						cursor.getColumnIndex(RSpeakSQLiteHelper.THREADS_COLUMN_IS_STOPPED)) > 0);
		thread.setCurrentlyOnAskerDevice(
				cursor.getInt(
						cursor.getColumnIndex(RSpeakSQLiteHelper.THREADS_COLUMN_ON_ASKER_DEVICE)) > 0);
		thread.setResponses(
				responsesDataSource.queryAllResponses(
						RSpeakSQLiteHelper.RESPONSES_COLUMN_THREAD_ID + " = '" + thread.getThreadID() + "'" ));
		
		return thread;
	}
}
