import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;


public class ResponsesDataSource {

	// Database Fields
	private SQLiteDatabase database;
	private RSpeakSQLiteHelper dbHelper;
	private String[] allColumns = { RSpeakSQLiteHelper.RESPONSES_COLUMN_RESPONSE_ID,
			RSpeakSQLiteHelper.RESPONSES_COLUMN_THREAD_ID,
			RSpeakSQLiteHelper.RESPONSES_COLUMN_RESPONSE_CONTENT,
			RSpeakSQLiteHelper.RESPONSES_COLUMN_TIME_POSTED };
	
	public ResponsesDataSource(Context context)
	{
		dbHelper = new RSpeakSQLiteHelper(context);
	}
	
	public void open() throws SQLException
	{
		database = dbHelper.getWritableDatabase();
	}
	
	public void close()
	{
		dbHelper.close();
	}
	
	public Response createResponse(String thread_id,
			String response_content,
			long time_posted)
	{
		ContentValues values = new ContentValues();
		
		values.put(RSpeakSQLiteHelper.RESPONSES_COLUMN_THREAD_ID, thread_id);
		values.put(RSpeakSQLiteHelper.RESPONSES_COLUMN_RESPONSE_CONTENT, response_content);
		values.put(RSpeakSQLiteHelper.RESPONSES_COLUMN_TIME_POSTED, time_posted);
		
		long response_id = database.insert(RSpeakSQLiteHelper.TABLE_RESPONSES, null, values);
		Cursor cursor = database.query(RSpeakSQLiteHelper.TABLE_RESPONSES,
				allColumns,
				RSpeakSQLiteHelper.RESPONSES_COLUMN_RESPONSE_ID + " = " + response_id,
				null,
				null,
				null,
				null);
		cursor.moveToFirst();
		Response newResponse = cursorToResponse(cursor);
		cursor.close();
		return newResponse;
	}
	
	// no delete response method because all responses within a thread
	// are deleted once the parent thread is deleted
	// response deletion is implemented in ThreadsDataSource.deleteThread
	
	public List<Response> getAllResponses()
	{
		List<Thread> threads = new ArrayList<Thread>();
		
		Cursor cursor = database.query(RSpeakSQLiteHelper.TABLE_THREADS,
				allColumns,
				null,
				null,
				null,
				null,
				null);
		
		cursor.moveToFirst();
		while (!cursor.isAfterLast()) 
		{
			Thread thread = cursorToThread(cursor);
			threads.add(thread);
			cursor.moveToNext();
		}
		
		cursor.close();
		return threads;
	}
}
